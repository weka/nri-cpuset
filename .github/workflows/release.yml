name: Build and Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  packages: write

jobs:
  analyze-commits:
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.semantic.outputs.should-release }}
      release-type: ${{ steps.semantic.outputs.release-type }}
      next-version: ${{ steps.semantic.outputs.next-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Analyze commits for semantic versioning
        id: semantic
        run: |
          # Get commits since last tag or beginning if no tags
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            COMMITS=$(git log ${LAST_TAG}..HEAD --oneline)
          else
            COMMITS=$(git log --oneline)
          fi
          
          echo "Analyzing commits:"
          echo "$COMMITS"
          
          # Check for semantic commit patterns
          FEAT_COUNT=$(echo "$COMMITS" | grep -E "^[a-f0-9]+ feat(\(.+\))?: " | wc -l || echo "0")
          FIX_COUNT=$(echo "$COMMITS" | grep -E "^[a-f0-9]+ fix(\(.+\))?: " | wc -l || echo "0")
          BREAK_COUNT=$(echo "$COMMITS" | grep -E "^[a-f0-9]+ .+!(\(.+\))?: " | wc -l || echo "0")
          CHORE_COUNT=$(echo "$COMMITS" | grep -E "^[a-f0-9]+ chore(\(.+\))?: " | wc -l || echo "0")
          DOCS_COUNT=$(echo "$COMMITS" | grep -E "^[a-f0-9]+ docs(\(.+\))?: " | wc -l || echo "0")
          
          echo "Found commits: feat=$FEAT_COUNT, fix=$FIX_COUNT, breaking=$BREAK_COUNT, chore=$CHORE_COUNT, docs=$DOCS_COUNT"
          
          # Determine release type
          SHOULD_RELEASE="false"
          RELEASE_TYPE=""
          
          if [ $BREAK_COUNT -gt 0 ]; then
            SHOULD_RELEASE="true"
            RELEASE_TYPE="major"
          elif [ $FEAT_COUNT -gt 0 ]; then
            SHOULD_RELEASE="true"
            RELEASE_TYPE="minor"
          elif [ $FIX_COUNT -gt 0 ]; then
            SHOULD_RELEASE="true"
            RELEASE_TYPE="patch"
          elif [ $CHORE_COUNT -gt 0 ] || [ $DOCS_COUNT -gt 0 ]; then
            SHOULD_RELEASE="true"
            RELEASE_TYPE="patch"
          fi
          
          # Calculate next version
          CURRENT_VERSION="0.0.0"
          if [ -n "$LAST_TAG" ]; then
            CURRENT_VERSION=${LAST_TAG#v}
          fi
          
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}
          
          case $RELEASE_TYPE in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEXT_VERSION="$MAJOR.$MINOR.$PATCH"
          
          echo "should-release=$SHOULD_RELEASE" >> $GITHUB_OUTPUT
          echo "release-type=$RELEASE_TYPE" >> $GITHUB_OUTPUT
          echo "next-version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          
          echo "Decision: should_release=$SHOULD_RELEASE, release_type=$RELEASE_TYPE, next_version=$NEXT_VERSION"

  build:
    runs-on: ubuntu-latest
    needs: analyze-commits
    if: needs.analyze-commits.outputs.should-release == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Run go vet
        run: go vet ./...

      - name: Run tests
        run: make test

      - name: Create build directory
        run: |
          rm -rf .temp
          mkdir -p .temp

      - name: Build Linux AMD64 binary
        env:
          GOOS: linux
          GOARCH: amd64
          CGO_ENABLED: "0"
        run: |
          go build -ldflags="-w -s" -o .temp/weka-cpuset-linux-amd64 ./cmd/weka-cpuset

      - name: Build Linux ARM64 binary
        env:
          GOOS: linux
          GOARCH: arm64
          CGO_ENABLED: "0"
        run: |
          go build -ldflags="-w -s" -o .temp/weka-cpuset-linux-arm64 ./cmd/weka-cpuset

      - name: Create checksums
        run: |
          cd .temp
          ls -la
          sha256sum weka-cpuset-linux-* > checksums.txt
          cat checksums.txt

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: weka-cpuset-binaries
          path: |
            .temp/weka-cpuset-linux-amd64
            .temp/weka-cpuset-linux-arm64
            .temp/checksums.txt
          retention-days: 1

  release:
    runs-on: ubuntu-latest
    needs: [analyze-commits, build]
    if: needs.analyze-commits.outputs.should-release == 'true' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: weka-cpuset-binaries
          path: .temp/

      - name: List downloaded artifacts
        run: |
          echo "Contents of .temp/:"
          ls -la .temp/

      - name: Generate changelog
        id: changelog
        run: |
          VERSION="v${{ needs.analyze-commits.outputs.next-version }}"
          
          # Get commits since last tag or beginning
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            COMMITS=$(git log ${LAST_TAG}..HEAD --oneline)
          else
            COMMITS=$(git log --oneline)
          fi
          
          echo "## What's Changed" > changelog.md
          echo "" >> changelog.md
          
          # Group commits by type
          echo "$COMMITS" | grep -E "^[a-f0-9]+ feat(\(.+\))?: " | sed 's/^[a-f0-9]* /- /' >> changelog.md || true
          echo "$COMMITS" | grep -E "^[a-f0-9]+ fix(\(.+\))?: " | sed 's/^[a-f0-9]* /- /' >> changelog.md || true
          echo "$COMMITS" | grep -E "^[a-f0-9]+ chore(\(.+\))?: " | sed 's/^[a-f0-9]* /- /' >> changelog.md || true
          echo "$COMMITS" | grep -E "^[a-f0-9]+ docs(\(.+\))?: " | sed 's/^[a-f0-9]* /- /' >> changelog.md || true
          
          echo "" >> changelog.md
          echo "## Binaries" >> changelog.md
          echo "" >> changelog.md
          echo "- \`weka-cpuset-linux-amd64\` - Linux x86_64 binary" >> changelog.md
          echo "- \`weka-cpuset-linux-arm64\` - Linux ARM64 binary" >> changelog.md
          echo "- \`checksums.txt\` - SHA256 checksums for all binaries" >> changelog.md
          
          cat changelog.md

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ needs.analyze-commits.outputs.next-version }}"
          name: "Release v${{ needs.analyze-commits.outputs.next-version }}"
          body_path: changelog.md
          files: |
            .temp/weka-cpuset-linux-amd64
            .temp/weka-cpuset-linux-arm64
            .temp/checksums.txt
          draft: false
          prerelease: false